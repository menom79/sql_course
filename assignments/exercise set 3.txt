Query 1
-- Select the average of rate values from departments M-P. Set result set column name to be 
Average. Result set value should be presented with two decimals.

-- assuming both M and P included
Select round(avg(rate),2) as Average from emps where DEPT >="M" and DEPT <="P";

Query 2
-- Select employee count of employees having rate value between 6-8. Set result set column 
name to be EmpRateCount.

Select count(*) as EmpRateCount from emps where rate between 6 and 8;

Query 3
-- Count the sum for rate values of employees working in departments A-G?

Select sum(rate) from emps where DEPT >= "A" and DEPT <= "G";

Query 4
-- Select the maximum and minimum value of rate value from employees living in Davis. Set 
result set column names to be Greatest and Smallest.

Select max(rate) as greatest, min(rate) as smallest from emps where city="Davis";

Quer 5
-- Count the amount of employees having rate value over 10 from each department. Department 
and employee count must be included in the result set. Result set column name should be 
Count. Set result set by Count column in descending order.

Select DEPT, count(*) as count from emps where rate > 10 group by DEPT order by count desc;

Query 6
-- Create new usernames for employees using string functions. Username should include first 
two letters from firstname, last three letters from surname and first three numbers from 
phone number. Use column name Username.

SELECT CONCAT(left(gname, 2), right(surname, 3), left(phone, 3)) as username from emps;

Query 7
-- Select different cities and show city names in lowercase letters in the result set. Use 
column name Locations. Order result set by city name in ascending order.

Select distinct lower(city) as Locations from emps  order by Locations asc;

Query 8
-- Select employee firstname, surname and the length of surname (use column name 
surname_length). Include only employees whose surname length is greater than six 
characters.

Select gname, surname, length(surname) as surname_length from emps where length(surname)>6;

Query 9
-- Categorize department budgets in the following manner: budgets below 100000 dollars will 
be categorized as Low and budgets greater than 100000 as High. Include columns dept, duty, 
budget and a newly created column (use column name budget_categorization) in the result set.

Select DEPT, duty, budget, 
case 
	when budget < 100000 then "low" 
	when budget > 100000 then "high" 
    else
		"None"
end as budget_categorization 
from dept;

Query 10
-- Count rate value averages for each city (use column name city_averages). City and the 
average of rate values should be included in the result set. Use descending order by rate 
value for the result set.

Select City, avg(rate) as city_averages from emps group by city order by city_averages desc;

Query 11
-- Analyze what the following SELECT query returns and why (not related to Ocelot training 
database).
SELECT CURRENT_USER, 
    CASE
        WHEN CAST(CURRENT_DATE AS CHAR(10)) <= '2011-02-22'
        THEN 'OK'
        ELSE 'Late'
    END as CheckIt
FROM TargetTable

Explanation: From TargetTable the CURRENT_USER returns the case who comes on or before the 
date (2011-02-22), they are termed OK and rests are Late in the result column CheckIt.
	     The current date character (up to 10) will relate and compare to the right side 
("2011-02-22") and perform the difference operation to attain the results.

